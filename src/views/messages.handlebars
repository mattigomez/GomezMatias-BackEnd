{{!-- <h1>Chat</h1>
<div>
  <input type="text" id="chatTextBox" placeholder="Tu mensaje" />
</div>
<div>
  <br /><br />
  <label for="">Mensajes</label>
  <p id="messages"></p>
</div>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/index.js"></script> --}}

<h1>Messages</h1>
<h2>Bienvenido {{userEmail}}</h2>
<div id="messages">
</div>

<form id="messagesForm" action="/" method="POST">
  <input type="email" name="user" placeholder="Correo">
  <input type="text" name="message" placeholder="Mensaje">
  <button type="submit">Enviar</button>
</form>


<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io(); 
const messages = document.getElementById('messages'); 
const messagesForm = document.getElementById('messagesForm'); 
const user = document.querySelector('input[name="user"]'); 
const message = document.querySelector('input[name="message"]'); 
// mensaje recibido
socket.on('new message', (data) => {
  const li = document.createElement('li'); 
  li.innerHTML = `<strong>${data.user}</strong>: ${data.message}`; 
  messages.appendChild(li); 
});
// mensajes viejos recibidos
socket.on('old messages', (data) => {
  data.forEach((message) => {
    const li = document.createElement('li'); // 
    li.innerHTML = `<strong>${message.user}</strong>: ${message.message}`; 
    messages.appendChild(li); 
  });
});
// manejar el envÃ­o de mensajes
messagesForm.addEventListener('submit', (e) => {
  e.preventDefault(); 
  const data = {
    user: user.value, 
    message: message.value 
  };
  socket.emit('send message', data); 
  message.value = ''; 
  message.focus();Â 
});
</script>